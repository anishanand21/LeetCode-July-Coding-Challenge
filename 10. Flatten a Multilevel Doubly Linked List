You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.
Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.

Example 1:

Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
Output: [1,2,3,7,8,11,12,9,10,4,5,6]

We use the multilevel linked list from Example 1 above:

 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL
             
The serialization of each level is as follows:

[1,2,3,4,5,6,null]
[7,8,9,10,null]
[11,12,null]
To serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:

[1,2,3,4,5,6,null]
[null,null,7,8,9,10,null]
[null,11,12,null]
Merging the serialization of each level and removing trailing nulls we obtain:

[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]             


Steps:
1. Iterate through the nodes
2. If node has child save the next node to a variable; call recursive function call on child (Will return child as head)
3. Set next of current node to child
4. Remove child ptr from current node
5. Iterate through the child node sequence to get last node
6. Set next of last child sequence node to the variable we saved in step 2
7. Set next of this node to the next we saved on step 2
8. If that next was not NULL then set its previous to this last node
9. Return head

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;
};
*/

class Solution {
public:
    Node* flatten(Node* head) {
        if(!head) return NULL;
        Node* trav = head;
        while(trav){
            if(trav->child){
                Node* next = trav->next;
                Node* child = flatten(trav->child);
                trav->child = NULL;
                trav->next = child;
                child->prev = trav;
                Node* lastNode = child;
                while(lastNode->next) lastNode = lastNode->next;
                lastNode->next = next;
                if(next) next->prev = lastNode;
            }
            trav = trav->next;
        }
        return head;
    }
};
